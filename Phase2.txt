/* Assignment 5 - Phase 2: Card Tabke
   Description: Assignment 5 - Phase 2 draws a JFrame containing a card table to the screen.
   Team:
   Christopher Rendall
   Caroline Lancaster
   Daniel Kushner
*/

import javax.swing.*;
import java.awt.*;
import javax.swing.border.*;
import java.lang.Comparable;
import java.io.File;

/* Phase 2 is a driver class to display a card table.
   The card table provides a playing area for a two player card game. */
public class Phase2 {
   static int NUM_CARDS_PER_HAND = 7;
   static int NUM_PLAYERS = 2;
   //Labels to hold text and icons.
   static JLabel[] computerLabels = new JLabel[NUM_CARDS_PER_HAND];
   static JLabel[] humanLabels = new JLabel[NUM_CARDS_PER_HAND];
   static JLabel[] playedCardLabels = new JLabel[NUM_PLAYERS];
   static JLabel[] playLabelText = new JLabel[NUM_PLAYERS];

   public static void main(String[] args) {

      CardTable table = new CardTable("Test", 20, 2); //Create a card table.
      //Fill each card label with a random card.
      for (int i = 0; i < NUM_CARDS_PER_HAND; i++) {
         computerLabels[i] = new JLabel();
         computerLabels[i].setIcon(GUICard.getBackCardIcon());
         humanLabels[i] = new JLabel();
         humanLabels[i].setIcon(GUICard.getIcon(generateRandomCard()));
         humanLabels[i].setMaximumSize(new Dimension(0, 0));
         table.pnlComputerHand.add(computerLabels[i]);
         table.pnlHumanHand.add(humanLabels[i]);
      }
      //Fill each text label with the appropriate text.
      for (int i = 0; i < NUM_PLAYERS; i++) {
         playedCardLabels[i] = new JLabel();
         playedCardLabels[i].setIcon(GUICard.getIcon(generateRandomCard()));
         playLabelText[i] = new JLabel();
         if (i == 0)
            playLabelText[i].setText("Computer");
         else
            playLabelText[i].setText("You");
         playedCardLabels[i].setHorizontalAlignment(JLabel.CENTER);
         table.pnlPlayArea.add(playedCardLabels[i]);
      }
      //Fix the alignment on the text labels.
      for (JLabel label : playLabelText) {
         label.setHorizontalAlignment(JLabel.CENTER);
         table.pnlPlayArea.add(label);
      }
      //Show the table.
      table.setVisible(true);
   }
   /* In: Nothing
      Out: A random card object */
   static Card generateRandomCard() {
      Card card = new Card();
      //Grab a random value and suit.
      int value = (int) (Math.random() * (Card.validCardValues.length - 1));
      int suit = (int) (Math.random() * (Card.validCardSuits.length - 1));
      card.set(Card.validCardValues[value], Card.Suit.values()[suit]);
      return card;
   }
}
/* GUICard implements various functions necessary to draw card images
   to the screen. */
class GUICard {
   //Holds a card icon for each valid card.
   private static Icon[][] iconCards = new ImageIcon[14][4];
   private static Icon iconBack;
   static boolean iconsLoaded = false;
   static final char[] VALID_SUITS = {'C', 'D', 'H', 'S'};
   private static String iconFolderPath = "./images";

   /* In: A card object that the caller wants an image for
      Out: An Icon containing the image */
   public static Icon getIcon(Card card) {
      //Load all of the card icons if they haven't been already.
      if (!GUICard.iconsLoaded)
         GUICard.loadCardIcons();
      //return the appropriate card icon.
      return iconCards[valueAsInt(card)][suitAsInt(card)];
   }
   /* In: Nothing
      Out: Nothing
      Loads all of teh card icons from the images directory. If the images directory is not in the right place,
      then the user is prompted to select a directory where the images can be found. */
   private static void loadCardIcons() {
      //If the images folder doesn't exist,
      if (!(new File(GUICard.iconFolderPath).exists())) {
         //Prompt the user for a valid image folder.
         JOptionPane.showMessageDialog(null, "By deafult ../images/ is used to store card icon images, but ../images/ does not exist. Press OK to select the folder where card icon images are stored. Press cancel in the forthcoming dialog window to exit this program.");
         JFileChooser chooser = new JFileChooser(".");
         chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
         chooser.setMultiSelectionEnabled(false);
         chooser.showDialog(null, "Select");
         File selectedFile = chooser.getSelectedFile();
         //Exit the program if a valid image folder is not provided.
         if (selectedFile == null)
            System.exit(0);
         GUICard.iconFolderPath = selectedFile.getPath();
         System.out.println(iconFolderPath);
      }
      //Load each of the cards into the appropriate position in the iconCards array.
      for (int i = 0; i < Card.validCardValues.length; i++)
         for (int j = 0; j < VALID_SUITS.length; j++) {
            //If a card cannot be loaded, tell the user and exit the application.
            if (!new File(iconFolderPath + "/" + Card.validCardValues[i] + VALID_SUITS[j] + ".gif").exists()) {
               JOptionPane.showMessageDialog(null, Card.validCardValues[i] + VALID_SUITS[j] + ".gif could not be found in the icon folder. Program execution will now stop.");
               System.exit(0);
            }
            iconCards[i][j] = new ImageIcon(iconFolderPath + "/" + Card.validCardValues[i] + VALID_SUITS[j] + ".gif");
         }
      //Load the back of the card icon.
      iconBack = new ImageIcon(iconFolderPath + "/BK.gif");
      GUICard.iconsLoaded = true; //Make sure this function is not called again.

   }
   /* In: A card object
      Out: An integer representing the row in iconCards that contains that value. */
   private static int valueAsInt(Card card) {
      String values = new String(Card.validCardValues);
      return values.indexOf(card.getValue());
   }
   /* In: A card object
      Out: An integer representing the column in the iconCards array that contains that suit. */
   private static int suitAsInt(Card card) {
      return card.getSuit().ordinal();
   }
   /* In: Nothing
      Out: An Icon object containing the back card icon. */
   public static Icon getBackCardIcon() {
      //Load all of the icons if they have not been already.
      if (!GUICard.iconsLoaded)
         GUICard.loadCardIcons();
      return GUICard.iconBack;
   }
}

/* Class Card represents a typical card that would be found in a deck of playing cards.
   It has private members to hold the value and suit of the card. It also has methods
   to validate and set these data members. 
*/
class Card implements Comparable {
   //The four standard suits are supported.
   public enum Suit {
      clubs, diamonds, hearts, spades
   };
   private char value;
   private Suit suit;
   //errorFlag is set to true if the user tries to create or set a card's value
   //to one that is not in the validCardValues array. This will cause the card's
   //toString() method to indicate that the card is invalid.
   boolean errorFlag;
   //validCardValues holds values that a card is allowed to be.
   public static char[] validCardValues = {'A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'X'};
   public static char[] validCardSuits = {'C', 'D', 'H', 'S'};
   public static char[] valueRanks = validCardValues;

   /* In: An object
      Out: An int indicating if the object is less than, greater than, or equal to
           the object performing the comparison. */
   public int compareTo(Object t) {
      if (t.getClass() != this.getClass())
         return 1;
      Card c = (Card) t;
      String strRanks = new String(valueRanks);
      if (strRanks.indexOf(c.getValue()) < 0)
         return 1;
      if (strRanks.indexOf(c.getValue()) < strRanks.indexOf(this.getValue()))
         return 1;
      if (strRanks.indexOf(c.getValue()) == strRanks.indexOf(this.getValue()))
         return 0;
      if (strRanks.indexOf(c.getValue()) > strRanks.indexOf(this.getValue()))
         return -1;
      return 1;
   }
   /* In: [1] An array of card objects to be sorted
          [2] The number of objects in parameter 1
      This uses a bubble sort to sort the cards in the cards array. */
   static void arraySort(Card[] cards, int arraySize) {
      //Swapped will change to true if any swapping occurs in the
      //loop below.
      boolean swapped = false;
      do {
         swapped = false;
         //Go through each element in the array
         for (int i = 1; i < arraySize; i++) {
            //If an element is larger thant he one after it,
            if (cards[i - 1].compareTo(cards[i]) > 0) {
               //Swap those elements.
               Card tmpCard = new Card(cards[i - 1]);
               cards[i - 1] = new Card(cards[i]);
               cards[i] = new Card(tmpCard);
               swapped = true;
            }
         }
      } while (swapped); //Continue until this loop runs with no swapping.
   }
   /* Card(char, Suit)
      In: A char representing the card's value, and a Suit representing the card's suit.
      Out: Nothing
      Description: This is a constructor that takes a value and a suit for a card. This will
                   create a card of the specified value and suit.
   */
   public Card(char value, Suit suit) {
      this.set(value, suit);
   }

   /* Card()
      In: Nothing
      Out: Nothing
      Description: This is a default constructor that takes no values. It will create an Ace of Spades.
   */
   public Card() {
      this.set('A', Suit.spades);
   }

   /* Card(Card)
      In: A Card object
      Out: Nothing
      Description: This is a copy constructor that returns a NEW card with the same values as the card
                   passed into it.
   */
   public Card(Card card) {
      this.set(card.value, card.suit);
   }

   /* boolean set(char, Suit)
      In: A char representing the card's value and a Suit representing the card's suit.
      Out: True if the value and suit are valid, false if otherwise.
      Description: This set's the card's suit and value, if they are valid. Otherwise,
                   it sets the card's errorFlag to true.
   */
   public boolean set(char value, Suit suit) {
      if (Card.isValid(value, suit)) {
         this.errorFlag = false;
         this.value = value;
         this.suit = suit;
         return true;
      } else {
         this.errorFlag = true;
         return false;
      }
   }

   /* boolean isValid(char, Suit)
      In: A char representing the card's value and a Suit representing its suit.
      Out: True if the value is valid, false if otherwise.
      Description: This function determines whether the value passed to it is a valid
                   value for a card. It checks the value against the valid values stored
                   in Card.validCardValues.
   */
   private static boolean isValid(char value, Suit suit) {
      for (char validValue : Card.validCardValues)
         if (String.valueOf(validValue).toLowerCase().equals(String.valueOf(value).toLowerCase()))
            return true;
      return false;
   }

   /* char getValue()
      In: Nothing
      Out: A char holding the card's value.
      Description: This is an accessor for the card's value.
   */
   public char getValue() {
      return value;
   }

   /* Suit getSuit()
      In: Nothing
      Out: The card's suit type.
      Description: This is an accessor for the card's suit.
   */
   public Suit getSuit() {
      return this.suit;
   }

   /* String toString()
      In: Nothing
      Out: A String object containing the value and suit of the card,
           or [INVALID CARD] if the errorFlag is set to true.
      Description: This returns the card's value to the caller in String form.
   */
   public String toString() {
      if (this.errorFlag == true)
         return "[INVALID CARD]";
      else
         return this.value + " of " + suit.toString();
   }
   /* In: A card object
      Out: A boolean value. True if the cards are equal, false if otherwise. */
   public boolean equals(Card c) {
      if (this.getValue() == c.getValue() && this.getSuit() == c.getSuit())
         return true;
      return false;
   }
}
/* Class Hand represents a hand of cards. This is much like a collection of cards, but provides methods
   or interaction with the cards that are specific to a "hand," rather than a collection.
*/
class Hand {
   public static final int MAX_CARDS = 50;
   private Card[] myCards = new Card[MAX_CARDS];
   int numCards = 0;

   /* Hand()
      In: Nothing
      Out: Nothing
      Description: The default constructor for Hand does not actually do anything.
   */
   public Hand() {
   }
   /* In: Nothing
      Out: Nothing
      Sorts all of the cards in the hand object. */
   void sort() {
      Card.arraySort(this.myCards, numCards);
   }

   /* void resetHand()
      In: Nothing
      Out: Nothing
      Description: This sets the hand to its default state, containing no cards.
   */
   public void resetHand() {
      this.myCards = new Card[MAX_CARDS];
      this.numCards = 0;
   }

   /* boolean takeCard(Card)
      In: A Card object
      Out: True if there is room in the hand for the card, false if otherwise
      Description: This takes a Card object and places a copy of that object into the hand.
   */
   public boolean takeCard(Card card) {
      if (this.numCards >= MAX_CARDS)
         return false;
      else {
         this.myCards[numCards] = new Card(card);
         this.numCards++;
         return true;
      }
   }

   /* Card playCard()
     In: Nothing
     Out: A Card object with the same values as the card on the top of the hand.
     Description: This creates a copy of the first card in the hand and returns it to the caller.
  */
   public Card playCard() {
      Card card = this.myCards[this.numCards - 1];
      this.myCards[this.numCards - 1] = null;
      this.numCards--;
      return card;
   }

   /* String toString()
     In: Nothing
     Out: A String object containing the cards in the hand.
     Description: This will provide a textual representation of the data contained in hand to the caller.
  */
   public String toString() {
      String handString = "( ";
      for (int i = 0; i < this.numCards; i++) {
         handString += this.myCards[i].toString();
         if (i != this.numCards - 1)
            handString += ", ";
      }
      handString += " )";
      return handString;
   }

   /* int getNumCards()
     In: Nothing
     Out: An integer whose value is the number of cards in the hand.
     Description: This is a basic accessor function.
  */
   public int getNumCards() {
      return this.numCards;
   }

   /* Card inspectCard(int)
      In: An integer representing the position of the card to be inspected.
      Out: A copy of the card at the specified position, or an invalid card if there is no
           card in that position.
      Description: This function returns a Card object whose values are equal to the card in
                   the specified position.
   */
   public Card inspectCard(int k) {
      if (k >= this.numCards || k < 0)
         return new Card('0', Card.Suit.spades);
      else
         return new Card(this.myCards[k]);
   }
   
   /* In: An integer specifying the position of the card to play in the hand
      Out: The Card object representing the card in that position
      This plays a card and removes it from the hand. */
   public Card playCard(int k) {
      //If k is invalid, return an invalid card.
      if (k >= this.numCards || k < 0)
         return new Card('0', Card.Suit.spades);
      else {
         //Return the card in that position, and
         //move all of the cards after that card
         //back by one position.
         Card card = new Card(this.myCards[k]);
         for (int i = k + 1; i < this.numCards; i++) {
            this.myCards[i - 1] = this.myCards[i];
            this.myCards[i] = null;
         }
         this.numCards--;
         return card;
      }
   }
}
/* CardTable implements JFRame in order to draw a GUI card table. It contains
   three main panels, one for the human's hand, one for the computer's, and one for
   the play area. */
class CardTable extends JFrame {
   static final int MAX_CARDS_PER_HAND = 56;
   static final int MAX_PLAYERS = 2;
   private int numCardsPerHand;
   private int numPlayers;
   public JPanel pnlComputerHand, pnlHumanHand, pnlPlayArea;
   /*Constructor to build the card table. */
   public CardTable(String title, int numCardsPerHand, int numPlayers) {
      super(); //Call the JFrame constructor.
      //Validate the input and fix it if necessary.
      if (numCardsPerHand < 0 || numCardsPerHand > CardTable.MAX_CARDS_PER_HAND)
         this.numCardsPerHand = 20;
      this.numCardsPerHand = numCardsPerHand;
      if (numPlayers < 2 || numPlayers > CardTable.MAX_PLAYERS)
         this.numPlayers = numPlayers;
      if (title == null)
         title = "";
      //Set some of the window properties.
      this.setSize(800, 600);
      this.setMinimumSize(new Dimension(800, 600));
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

      //The card table uses a BorderLayout, allowing the panels to have
      //different sizes.
      BorderLayout layout = new BorderLayout();
      this.setLayout(layout);
      
      //The human hand and computer hand panels use a flow layot.
      FlowLayout flowLayout = new FlowLayout(FlowLayout.LEFT);
      //TitledBorders are used for the panels, allowing them to have text titles.
      TitledBorder border = new TitledBorder("Computer Hand");
      pnlComputerHand = new JPanel();
      pnlComputerHand.setLayout(flowLayout);
      pnlComputerHand.setPreferredSize(new Dimension((int) this.getMinimumSize().getWidth() - 50, 115));
      //Use a scroll pane in case the hand has too many cards to fit on the panel.
      JScrollPane scrollComputerHand = new JScrollPane(pnlComputerHand);
      scrollComputerHand.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
      scrollComputerHand.setBorder(border);
      this.add(scrollComputerHand, BorderLayout.NORTH);
      
      border = new TitledBorder("Playing Area");
      GridLayout gridLayout = new GridLayout(2, 2);
      pnlPlayArea = new JPanel();
      pnlPlayArea.setBorder(border);
      pnlPlayArea.setLayout(gridLayout);
      this.add(pnlPlayArea, BorderLayout.CENTER);

      border = new TitledBorder("Human Hand");
      pnlHumanHand = new JPanel();
      pnlHumanHand.setLayout(flowLayout);
      pnlHumanHand.setPreferredSize(new Dimension((int) this.getMinimumSize().getWidth() - 50, 115));
      JScrollPane scrollHumanHand = new JScrollPane(pnlHumanHand);
      scrollHumanHand.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
      scrollHumanHand.setBorder(border);
      this.add(scrollHumanHand, BorderLayout.SOUTH);


   }
}

/* Class Deck represents a deck of cards consisting of a variable number of 52 card packs. It
   contains a master pack, which the deck is built off of. It also contains member functions
   that would be expected of a deck of cards, providing functionality like shuffling
   and dealing.
*/
class Deck {
   public static final short MAX_CARDS_IN_PACK = 56;
   public static final short MAX_PACKS = 6;
   public static final short MAX_CARDS = MAX_PACKS * MAX_CARDS_IN_PACK;
   //The masterPack is a pack of cards that the cards in the deck are built off of.
   //It contains one card for each value/suit combination. This is static,
   //as it does not change per object instantiated.
   private static Card[] masterPack = new Card[MAX_CARDS_IN_PACK];
   private Card[] cards; //The cards in the object's deck. Not static, as each deck object can have different cards.
   private int topCard; //The position of the card on the top of the deck.
   private int numPacks; //The deck can consist of multiple packs of cards.

   /* Deck(int)
      In: An integer specifying the number of packs to build the deck from.
      Out: Nothing
      Description: This is a constructor that will build a deck composed of the
                   specified number of packs.
   */
   public Deck(int numPacks) {
      //Build the master pack.
      this.allocateMasterPack();
      //If the user wants more packs than are available, give them the max.
      if (numPacks > Deck.MAX_PACKS)
         this.init(Deck.MAX_PACKS);
         //If the user wants 0 or less packs, give them one.
      else if (numPacks < 1)
         this.init(1);
      else
         //Otherwise, build the deck with the specified number of packs.
         this.init(numPacks);
   }

   /* Deck()
      In: None
      Out: Nothing
      Description: This default constructor builds a deck with one pack.
   */
   public Deck() {
      this.allocateMasterPack();
      this.init(1);
   }

   /* void init(int)
      In: An integer whose value is the number of packs to build the deck from.
      Out: Nothing
      Description: This will initialize the cards array data member to a complete deck built
                   from the specified number of packs.
   */
   public void init(int numPacks) {
      //Initialize the cards array.
      this.cards = new Card[numPacks * Deck.MAX_CARDS_IN_PACK];
      //Until the total number of cards are reached, keep adding cards from the
      //master pack.
      for (int i = 0; i < numPacks * Deck.MAX_CARDS_IN_PACK; i++) {
         this.cards[i] = this.masterPack[i % Deck.MAX_CARDS_IN_PACK];
      }
      //Set the top card to the last card allocated.
      this.topCard = numPacks * Deck.MAX_CARDS_IN_PACK;
   }

   /* void shuffle()
      In: Nothing
      Out: Nothing
      Description: This uses a Fisher-Yates shuffle to shuffle all of the cards in the
                   deck.
   */
   public void shuffle() {
      //Beginning with the top card, decrement i until i is 0.
      for (int i = this.topCard - 1; i >= 0; i--) {
         Card tmpCard = this.cards[i]; //Store the card at i, since it will be overwritten.
         //Choose a random card position from within the deck.
         int randomPosition = (int) (Math.random() * (this.topCard - 1));
         //Take the card from the random position and store it in the ith position.
         this.cards[i] = this.cards[randomPosition];
         //Take the card from the ith position, and put it into the randomly chosen position.
         this.cards[randomPosition] = tmpCard;
         //The cards have now been swapped.
      }
   }

   /* Card dealCard()
      In: Nothing
      Out: A copy of the Card object on the top of the deck.
      Description: This function makes a copy of the card on the top of the deck,
                   removes that card from the deck, and returns the copy to the caller.
   */
   public Card dealCard() {
      //Return an invalid card if there are no cards in the deck.
      if (this.topCard < 0)
         return new Card('0', Card.Suit.spades);
      else {
         //Create a copy of the card on the top of the deck.
         Card card = new Card(this.cards[this.topCard - 1]);
         //Set the actual card on the top of the deck to null, to destroy it.
         this.cards[this.topCard - 1] = null;
         //The topCard is now one less than it was.
         this.topCard--;
         //return the copy.
         return card;
      }
   }

   /* int getTopCard()
      In: Nothing
      Out: An integer whose value is the position of the top card in the deck.
      Description: This is a basic accessor function.
   */
   public int getTopCard() {
      return this.topCard;
   }

   /* Card inspectCard(int)
      In: An integer representing the position of the card to be inspected.
      Out: A copy of the card at the specified position, or an invalid card if there is no
           card in that position.
      Description: This function returns a Card object whose values are equal to the card in
                   the specified position.
   */
   public Card inspectCard(int k) {
      //If k is invalid, return an invalid card.
      if (k >= this.topCard || k < 0)
         return new Card('0', Card.Suit.spades);
      else
         //Otherwise, return a copy of the card in position k.
         return new Card(this.cards[k]);
   }

   /* void allocateMasterPack()
      In: Nothing
      Out: Nothing
      Description: This function fills the masterPack if it is not already filled. It fills the pack
                   with valid card values.
   */
   private static void allocateMasterPack() {
      //If Deck.masterPack is null, then it needs to be filled, otherwise, nothing needs to be done.
      if (Deck.masterPack != null) {
         //For each suit, fill the masterPack with each valid card value from that suit.
         for (int i = 0; i < Card.Suit.values().length; i++) {
            for (int j = 0; j < Card.validCardValues.length; j++) {
               Deck.masterPack[i * Card.validCardValues.length + j] = new Card(Card.validCardValues[j], Card.Suit.values()[i]);
            }
         }
      }
   }
   /* In: A card object to add to the deck
      Out: A boolean value indicating whether the card was able to be added to the deck */
   public boolean addCard(Card card) {
      int cardCount = 0;
      //Check to see if the deck already has the maximum number of cards
      //of this type.
      for (Card cardInDeck : this.cards)
         if (cardInDeck.equals(card))
            cardCount++;
      //Return false is the card will not fit, or if it is invalid.
      if (cardCount >= this.numPacks || this.topCard >= this.MAX_CARDS || card.errorFlag)
         return false;
      this.topCard++;
      //Add the card object to the deck.
      this.cards[topCard - 1] = new Card(card);
      return true;
   }
   /* In: Nothing
      Out: An itneger indicating the number of cards in the deck. */
   public int getNumCards() {
      return this.topCard;
   }
   /* In: A card object to remove from the deck
      Out: A boolean value indicating if the card was able to be removed from the deck. */
   public boolean removeCard(Card card) {
      //Iterate through the deck to find the card.
      for (int i = 0; i < this.cards.length; i++)
         if (this.cards[i].equals(card)) {
            //If the card is found, then remove it from the deck.
            //replace it with the topCard
            this.cards[i] = new Card(this.cards[topCard - 1]);
            this.topCard--;
            return true;
         }
      return false;
   }
   /* In: Nothing
      Out: Nothing
      Sorts the cards in the deck */
   public void sort() {
      Card.arraySort(this.cards, this.topCard);
   }
}